
1)FIRSTLY --> BANK NAME
2.	CLASS --> BANK OOPS
CREATE NEW ACCOUNT --> NAME , AADHAR CARD , .... --> file handling > msg -> your account has been created LOGIN -> ACCOUNTHOLDER'SNAME , ID , PASSWORD(conditions , alphabumeric, special characters) , (No space , len should be less than 10 & greater than 6) --> exception raise , handle it
3.	Login
credit debit add the amount , then again check the balance balance check
In [1]:
class BankofBaroda:
    currentBal =0
    startingBal =5000
    dLogin = dict()
    dBal = {}
    def __init__(self,name, aadhar, address, user_id,pwd,amt):
        self.name = name
        self.aadhar =aadhar
        self.address =address
        self.user_id =user_id
        self.pwd=pwd
        self.amt =amt
       
       # kept active while creating the file for the first time and then have to keep it in comment mode
        #accfile = open('new1.txt' , mode='x')
       
       
        
    
    def newAcc(self, name, aadhar, address, user_id):
       # print("startingBal =5000", self.startingBal)
        accfile = open('new1.txt' , mode='a')
        x=False
       
      # Aadhar is digits only
        if not aadhar.isdigit():
            print('Aadhar card number should be numeric value')
            raise Exception ("Account not created!Try again")
        accfile = open('new1.txt' , mode='r')
        content = accfile.read()
        #print ('Content', content)
       # print('user ID',user_id )
        checkString= ","+ user_id
        if checkString in content:
            x= True
        else:
            x= False
        
        if (x):
            print("User ID already exist! Try different user id")
        else:
            accfile = open('new1.txt' , mode='a')
            line =name +"," + aadhar + "," + address + "," + user_id + "\n"
            accfile.write(line)
            print ("Account successfully created! ")
        
        accfile.close()

    
    def signup(self,user_id,pwd):
        accfile = open('new1.txt' , mode='r')
        
        content = accfile.read()
       # print("conteent",content)
       # print('user ID',user_id )
        greenflag = False
        hasdigit =False
        hasAlphabet =False
        hasSpecial =False
        
        special_characters = "!@#$%^&*()-+?_=,<>"
        checkString= ","+ user_id
        if checkString in content :
            #print ("content",content,"user_id,",user_id, "pwd" , pwd)
            for i in pwd:
                if i.isdigit() and hasdigit== False:
                    hasdigit = True
                    print('It has number')
                        
                if (i in special_characters and hasSpecial==False):
                    hasSpecial=True
                    print('It has special char')
                    
                if(i.isalpha() and hasAlphabet == False):
                    hasAlphabet=True
                    print('It has alphabet')
                        
        
            if not (hasSpecial and hasAlphabet and hasdigit):
                 raise Exception("The password must be alphanumeric with at least one special charactor!")
            else:
                greenflag=True
            
            if(greenflag):
                if(len(pwd) < 6): 
                     raise Exception("Length of the password should be at least 6 characters") 
                elif (len(pwd)>10):
                     raise Exception("Length of the password should be between 6 and 10 characters") 
                else:
                    self.dLogin.update({user_id:pwd})
                    
                    print ("Login successfully created! ",self.dLogin)
                    self.dBal.update({user_id:5000})
                    
        
        
        else:
             raise Exception("User ID does not exist! Create an account first")

         
    def checkbalance(self,user_id):
        user_id_missing =True
       
        
        if user_id in self.dLogin.keys():
            user_id_missing =False
            self.currentBal = self.dLogin.get(user_id)
            
        if(user_id_missing):
            raise Exception ("log in not created for this user_id :",user_id)
        
        return self.currentBal
        
        
    def Debit(self, user_id, amt):
        user_id_missing =True
        #print("dLogin",self.dLogin)
        if user_id in self.dLogin.keys():
            user_id_missing =False
            self.startingBal = self.dBal.get(user_id)
            
        if(user_id_missing):
            raise Exception ("log in not created for this user_id :",user_id)
        
        #print ("TYPE:",type( self.startingBal))
       # print("self.startingBal",self.startingBal)
        self.currentBal=self.startingBal -int(amt)
        self.dBal.update({user_id:self.currentBal})
        return  print(user_id," balance is ", self.currentBal)
        
    def credit(self, user_id, amt):
        user_id_missing =True
        #print("dLogin",self.dLogin)
        if user_id in self.dLogin.keys():
            user_id_missing =False
            
            self.startingBal = self.dBal.get(user_id)
        #print("self.startingBal",self.startingBal)
        self.currentBal=self.startingBal +int(amt)
        self.dBal.update({user_id:self.currentBal})
        return  print(user_id," balance is ", self.currentBal)
        
        
        
            
In [5]:
# Object creation
b1= BankofBaroda('Ajay', "12121212a", "AMD", "ajay123","ajay123#",'7000')
In [6]:
#Account created and Amar
b1.newAcc('amar', "12121212", "AMD", "ajay123")
Account successfully created! 
In [7]:
b1.newAcc('Ekta', "12121212", "AMD", "EKta456")
Account successfully created! 
In [8]:
#Correct pwd  
b1.signup('EKta456','Water456#')
It has alphabet
It has number
It has special char
Login successfully created!  {'EKta456': 'Water456#'}
In [9]:
#Correct pwd 
b1.signup('ajay123','ajay123#')
It has alphabet
It has number
It has special char
Login successfully created!  {'EKta456': 'Water456#', 'ajay123': 'ajay123#'}
In [10]:
print (b1.credit('ajay123',1000))
ajay123  balance is  6000
None
In [11]:
print (b1.Debit('EKta456',2000))
EKta456  balance is  3000
None
ERRORS
In [12]:
# ERROR: user id already exist
b1.newAcc('astha', "13434342", "AMD", "ajay123")
User ID already exist! Try different user id
In [13]:
b1.newAcc('Ajay', "12121212a", "AMD", "ajay123") #Aadhar card error
Aadhar card number should be numeric value
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[13], line 1
----> 1 b1.newAcc('Ajay', "12121212a", "AMD", "ajay123")

Cell In[1], line 28, in BankofBaroda.newAcc(self, name, aadhar, address, user_id)
     26 if not aadhar.isdigit():
     27     print('Aadhar card number should be numeric value')
---> 28     raise Exception ("Account not created!Try again")
     29 accfile = open('new1.txt' , mode='r')
     30 content = accfile.read()

Exception: Account not created!Try again
In [14]:
#Only Alphabets ->exception
b1.signup('ajay123','abcd')
It has alphabet
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[14], line 2
      1 #Only Alphabets ->exception
----> 2 b1.signup('ajay123','abcd')

Cell In[1], line 80, in BankofBaroda.signup(self, user_id, pwd)
     76         print('It has alphabet')
     79 if not (hasSpecial and hasAlphabet and hasdigit):
---> 80      raise Exception("The password must be alphanumeric with at least one special charactor!")
     81 else:
     82     greenflag=True

Exception: The password must be alphanumeric with at least one special charactor!
In [15]:
#Only Alphabets and numbers ->exception
b1.signup('ajay123','abcd12')
It has alphabet
It has number
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[15], line 2
      1 #Only Alphabets and numbers ->exception
----> 2 b1.signup('ajay123','abcd12')

Cell In[1], line 80, in BankofBaroda.signup(self, user_id, pwd)
     76         print('It has alphabet')
     79 if not (hasSpecial and hasAlphabet and hasdigit):
---> 80      raise Exception("The password must be alphanumeric with at least one special charactor!")
     81 else:
     82     greenflag=True

Exception: The password must be alphanumeric with at least one special charactor!
In [16]:
#Only Alphabets and special char ->exception
b1.signup('ajay123','abcd!')
It has alphabet
It has special char
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[16], line 2
      1 #Only Alphabets and special char ->exception
----> 2 b1.signup('ajay123','abcd!')

Cell In[1], line 80, in BankofBaroda.signup(self, user_id, pwd)
     76         print('It has alphabet')
     79 if not (hasSpecial and hasAlphabet and hasdigit):
---> 80      raise Exception("The password must be alphanumeric with at least one special charactor!")
     81 else:
     82     greenflag=True

Exception: The password must be alphanumeric with at least one special charactor!
In [17]:
#Only Less than 6 char ->exception
b1.signup('ajay123','abc3#')
It has alphabet
It has number
It has special char
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[17], line 2
      1 #Only Less than 6 char ->exception
----> 2 b1.signup('ajay123','abc3#')

Cell In[1], line 86, in BankofBaroda.signup(self, user_id, pwd)
     84 if(greenflag):
     85     if(len(pwd) < 6): 
---> 86          raise Exception("Length of the password should be at least 6 characters") 
     87     elif (len(pwd)>10):
     88          raise Exception("Length of the password should be between 6 and 10 characters") 

Exception: Length of the password should be at least 6 characters
In [18]:
#Only pwd greater than 10 char ->exception
b1.signup('ajay123','abc3#asadaff')
It has alphabet
It has number
It has special char
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[18], line 2
      1 #Only pwd greater than 10 char ->exception
----> 2 b1.signup('ajay123','abc3#asadaff')

Cell In[1], line 88, in BankofBaroda.signup(self, user_id, pwd)
     86      raise Exception("Length of the password should be at least 6 characters") 
     87 elif (len(pwd)>10):
---> 88      raise Exception("Length of the password should be between 6 and 10 characters") 
     89 else:
     90     self.dLogin.update({user_id:pwd})

Exception: Length of the password should be between 6 and 10 characters
In [19]:
# used id does not exist in the login file
b1.signup('ay123','abc3#daff')
---------------------------------------------------------------------------
Exception                                 Traceback (most recent call last)
Cell In[19], line 2
      1 # used id does not exist in the login file
----> 2 b1.signup('ay123','abc3#daff')

Cell In[1], line 98, in BankofBaroda.signup(self, user_id, pwd)
     93             self.dBal.update({user_id:5000})
     97 else:
---> 98      raise Exception("User ID does not exist! Create an account first")

Exception: User ID does not exist! Create an account first


